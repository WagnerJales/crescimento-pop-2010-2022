# -*- coding: utf-8 -*-
"""Sobreposição censo 2010 e 2022.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HoogkI-Udfxd09966eeNagBcDM5pd2Jq

1. Instalar Dependências
"""

!pip install geopandas matplotlib shapely pandas

"""2. Importar as Bibliotecas Necessárias

"""

import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from shapely.geometry import shape
import fiona

"""3. Carregar os Arquivos Shapefile
4. Ler os Shapefiles e Extrair Geometrias e Populações

"""

# Substitua 'path_to_2010.shp' e 'path_to_2022.shp' pelos caminhos corretos dos seus arquivos
shapefile_2010_path = '/content/2010.shp'
shapefile_2022_path = '/content/2022.shp'

with fiona.open(shapefile_2010_path) as src:
    records_2010 = list(src)

with fiona.open(shapefile_2022_path) as src:
    records_2022 = list(src)

# Extrair geometrias e populações
geometries_2010 = [shape(record['geometry']) for record in records_2010]
geometries_2022 = [shape(record['geometry']) for record in records_2022]

pop_2010 = [record['properties']['2010_V002'] for record in records_2010]
pop_2022 = [record['properties']['v0001'] for record in records_2022]

"""5. Preparar os DataFrames"""

df_2010 = pd.DataFrame({
    'geometry': geometries_2010,
    'pop_2010': pop_2010
})

df_2022 = pd.DataFrame({
    'geometry': geometries_2022,
    'pop_2022': pop_2022
})

"""6. Calcular a Área de Interseção e Distribuir a População

"""

def calculate_intersection_area(geom1, geom2):
    intersection = geom1.intersection(geom2)
    if not intersection.is_empty:
        return intersection.area
    return 0

# Calcular a população ajustada com base na proporção de interseção
def calculate_adjusted_population(df_2010, df_2022):
    adjusted_populations = []

    for i, geom_2010 in enumerate(df_2010['geometry']):
        adjusted_pop = 0
        for j, geom_2022 in enumerate(df_2022['geometry']):
            area_intersection = calculate_intersection_area(geom_2010, geom_2022)
            if area_intersection > 0:
                area_2022 = geom_2022.area
                proportion = area_intersection / area_2022 if area_2022 > 0 else 0
                adjusted_pop += proportion * df_2022.loc[j, 'pop_2022']
        adjusted_populations.append(adjusted_pop)

    return adjusted_populations

# Calcular população ajustada para cada setor de 2010
df_2010['adjusted_population_2022'] = calculate_adjusted_population(df_2010, df_2022)

"""7. Calcular a Mudança Percentual e Adicionar Códigos de Setor

"""

df_2010['CD_GEOCODI'] = [record['properties']['CD_GEOCODI'] for record in records_2010]

# Calcular a porcentagem de mudança da população de 2022 em relação a 2010
df_2010['population_change_percentage'] = ((df_2010['adjusted_population_2022'] - df_2010['pop_2010']) / df_2010['pop_2010']) * 100

# Criar tabela final com os resultados
final_table = pd.DataFrame({
    'CD_GEOCODI': df_2010['CD_GEOCODI'],
    'pop_2010': df_2010['pop_2010'],
    'adjusted_population_2022': df_2010['adjusted_population_2022'],
    'population_change_percentage': df_2010['population_change_percentage']
})

"""8. Salvar os Resultados em um Arquivo CSV

"""

final_table.to_csv('Tabela_Corrigida_Populacao_2022_Base_2010.csv', index=False)

"""9. Geração de Mapas com Dados de 2010, 2022 e Variação

"""

# Criar um GeoDataFrame para visualização
gdf_2010 = gpd.GeoDataFrame(df_2010, geometry='geometry')

# Mapa da População de 2010
plt.figure(figsize=(10, 15))
gdf_2010.plot(column='pop_2010', cmap='Blues', legend=True, legend_kwds={'label': "População 2010"})
plt.title('População 2010')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()

# Mapa da População Ajustada de 2022
plt.figure(figsize=(10, 15))
gdf_2010.plot(column='adjusted_population_2022', cmap='OrRd', legend=True, legend_kwds={'label': "População Ajustada 2022"})
plt.title('População 2022 ajustada ao mapa 2010')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()

# Mapa da Mudança Percentual da População
plt.figure(figsize=(10, 15))
gdf_2010.plot(column='population_change_percentage', cmap='coolwarm', legend=True, legend_kwds={'label': "% de mudança (2022 vs 2010)"})
plt.title('% de alteração (2022 vs 2010)')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.grid(True)
plt.show()

"""10. Visualizar os Gráficos de Dispersão e Barras

"""

# Verificar valores NaN ou inf nas colunas usadas para o gráfico
print("Verificando valores inválidos:")
print(f"Valores NaN em 'pop_2010': {df_2010['pop_2010'].isna().sum()}")
print(f"Valores NaN em 'adjusted_population_2022': {df_2010['adjusted_population_2022'].isna().sum()}")

# Remover linhas com valores inválidos
df_cleaned = df_2010.dropna(subset=['pop_2010', 'adjusted_population_2022'])

# Verificar novamente após a limpeza
print("Após a limpeza:")
print(f"Valores NaN em 'pop_2010': {df_cleaned['pop_2010'].isna().sum()}")
print(f"Valores NaN em 'adjusted_population_2022': {df_cleaned['adjusted_population_2022'].isna().sum()}")

# Scatter plot with trend line using cleaned data
plt.figure(figsize=(10, 6))
plt.scatter(df_cleaned['pop_2010'], df_cleaned['adjusted_population_2022'], alpha=0.6, edgecolor='k', label='Data Points')

# Calculate and plot trend line
z = np.polyfit(df_cleaned['pop_2010'], df_cleaned['adjusted_population_2022'], 1)
p = np.poly1d(z)
plt.plot(df_cleaned['pop_2010'], p(df_cleaned['pop_2010']), color='red', linestyle='--', linewidth=2, label='Trend Line')

plt.title('Scatter Plot of 2010 Population vs 2022 Adjusted Population')
plt.xlabel('Population 2010')
plt.ylabel('Adjusted Population 2022')
plt.grid(True)
plt.legend()

plt.show()

"""11. Conferir Totais de População


"""

total_pop_2010 = df_2010['pop_2010'].sum()
total_pop_2022_adjusted = df_2010['adjusted_population_2022'].sum()

print(f"Total Population 2010: {total_pop_2010}")
print(f"Total Adjusted Population 2022: {total_pop_2022_adjusted}")

total_V0001_2022 = sum(pop_2022)
print(f"Total Original Population 2022 (V0001): {total_V0001_2022}")

"""12. Criar um Gráfico de Barras Paralelas

"""

import matplotlib.pyplot as plt
import numpy as np

# Verificar e remover valores inválidos para garantir que não afetem o gráfico
df_bars = df_2010.dropna(subset=['pop_2010', 'adjusted_population_2022'])

# Selecionar uma amostra de setores censitários para melhor visualização (opcional)
sample_df = df_bars.sample(n=30, random_state=1)  # Reduzido para 30 para evitar sobrecarga visual

# Ordenar a amostra para visualização mais clara
sample_df = sample_df.sort_values('pop_2010')

# Configurar o gráfico de barras paralelas
bar_width = 0.4
index = np.arange(len(sample_df))

plt.figure(figsize=(10, 6))

# Plotar as barras para a população de 2010
plt.bar(index, sample_df['pop_2010'], bar_width, label='Population 2010', color='blue')

# Plotar as barras para a população ajustada de 2022 ao lado das de 2010
plt.bar(index + bar_width, sample_df['adjusted_population_2022'], bar_width, label='Adjusted Population 2022', color='orange')

# Configurações do gráfico
plt.xlabel('Census Tracts (Sampled)')
plt.ylabel('Population')
plt.title('Comparison of Population 2010 and Adjusted Population 2022 by Census Tracts')
plt.xticks(index + bar_width / 2, sample_df['CD_GEOCODI'], rotation=90)
plt.legend()

plt.tight_layout()

# Mostrar o gráfico de barras
plt.show()

"""13. Criar o Histograma Comparativo


"""

# Verificar e remover valores inválidos para garantir que não afetem o histograma
df_histogram = df_2010.dropna(subset=['pop_2010', 'adjusted_population_2022'])

# Configurar os bins para o histograma
bins = np.linspace(0, max(df_histogram['pop_2010'].max(), df_histogram['adjusted_population_2022'].max()), 30)

# Criar o histograma
plt.figure(figsize=(12, 6))
plt.hist(df_histogram['pop_2010'], bins=bins, alpha=0.5, label='Population 2010', color='blue', edgecolor='k')
plt.hist(df_histogram['adjusted_population_2022'], bins=bins, alpha=0.5, label='Adjusted Population 2022', color='orange', edgecolor='k')

# Configurações do gráfico
plt.title('Histogram of Population 2010 vs Adjusted Population 2022')
plt.xlabel('Population')
plt.ylabel('Frequency')
plt.legend(loc='upper right')
plt.grid(axis='y')

# Mostrar o histograma
plt.show()

from google.colab import files
files.download('Tabela_Corrigida_Populacao_2022_Base_2010.csv')